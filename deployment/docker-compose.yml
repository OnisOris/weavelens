services:
  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      CLUSTER_HOSTNAME: "node1"
      DEFAULT_VECTORIZER_MODULE: "none"
      QUERY_DEFAULTS_LIMIT: "25"
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      ENABLE_MODULES: "bm25"
      DISABLE_TELEMETRY: "true"
    volumes:
      - ../data/weaviate:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/v1/.well-known/ready"]
      interval: 5s
      timeout: 3s
      retries: 40
    profiles: ["server"]

  # ------------ Ollama (CPU) ------------
  ollama:
    image: ollama/ollama:latest
    container_name: deployment-ollama-1
    ports:
      - "11434:11434"
    volumes:
      - ../models:/root/.ollama
    environment:
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_NUM_GPU_LAYERS: "${OLLAMA_NUM_GPU_LAYERS:-0}"
    restart: unless-stopped
    profiles: ["cpu"]

  # ------------ Ollama (GPU/NVIDIA) ------------
  ollama-gpu:
    image: ollama/ollama:latest
    container_name: deployment-ollama-1
    ports:
      - "11434:11434"
    volumes:
      - ../models:/root/.ollama
    environment:
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_NUM_GPU_LAYERS: "${OLLAMA_NUM_GPU_LAYERS:-999}"
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    gpus: all
    restart: unless-stopped
    profiles: ["gpu"]
    networks:
      default:
        aliases: [ollama]

  # ------------ API (server, с Weaviate) ------------
  api:
    build:
      context: ..
      dockerfile: Dockerfile.api
    env_file:
      - ../.env
    environment:
      OLLAMA_HOST: "deployment-ollama-1"
      WEAVIATE_HOST: "weaviate"
      WEAVELENS_PROFILE: "server"
      EXTRA_SCAN_DIRS: '${EXTRA_SCAN_DIRS:-["/data/inbox","/app/data/inbox"]}'
      TG_ALLOWLIST: '${TG_ALLOWLIST:-[233016635]}'
    volumes:
      - ../data:/app/data
      - ../models:/app/models
      - ../data/inbox:/data/inbox
    ports:
      - "${API_HOST_PORT:-8000}:8000"
    depends_on:
      weaviate:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/api/ready', timeout=2).status==200 else sys.exit(1)\""
        ]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 15s
    restart: unless-stopped
    profiles: ["server"]

  # ------------ API (embedded, без Weaviate) ------------
  api-embedded:
    build:
      context: ..
      dockerfile: Dockerfile.api
    env_file:
      - ../.env
    environment:
      OLLAMA_HOST: "deployment-ollama-1"
      WEAVELENS_PROFILE: "embedded"
      EXTRA_SCAN_DIRS: '${EXTRA_SCAN_DIRS:-["/data/inbox","/app/data/inbox"]}'
      TG_ALLOWLIST: '${TG_ALLOWLIST:-[233016635]}'
    volumes:
      - ../data:/app/data
      - ../models:/app/models
      - ../data/inbox:/data/inbox
    ports:
      - "${API_HOST_PORT:-8000}:8000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/api/ready', timeout=2).status==200 else sys.exit(1)\""
        ]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 15s
    restart: unless-stopped
    profiles: ["embedded"]

  # ------------ Bot (server) ------------
  bot:
    build:
      context: ..
      dockerfile: Dockerfile.bot
    env_file:
      - ../.env
    environment:
      BOT_API_URL: "http://api:8000/api"
    volumes:
      - ../data:/app/data
      - ../data/inbox:/data/inbox
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["server"]

  # ------------ Bot (embedded) ------------
  bot-embedded:
    build:
      context: ..
      dockerfile: Dockerfile.bot
    env_file:
      - ../.env
    environment:
      BOT_API_URL: "http://api-embedded:8000/api"
    volumes:
      - ../data:/app/data
      - ../data/inbox:/data/inbox
    depends_on:
      api-embedded:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["embedded"]

